
import javax.swing.DefaultListModel;

public class EditDeckUI extends javax.swing.JFrame {

    private final int MAXCV = 1000;
    private final int MAXCARD = 4;
    private User user;
    private String deckName;

    /** Creates new form EditDeckUI */
    public EditDeckUI(User u, String s) {
        user = u;
        deckName = s;
        initComponents();

        populateLibrary();
        populateCards();
        deckNameLabel.setText("Deck: " + deckName);

        //deleteFromLibraryButton.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        deckNameLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        libraryList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        deckCardList = new javax.swing.JList();
        deleteFromDeckButton = new javax.swing.JButton();
        addToDeck = new javax.swing.JButton();
        deleteFromLibraryButton = new javax.swing.JButton();
        currentCard = new CardPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18));
        jLabel1.setText("Card Library");

        deckNameLabel.setFont(new java.awt.Font("Tahoma", 0, 18));
        deckNameLabel.setText("Deck Name");

        libraryList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libraryListMouseClicked(evt);
            }
        });
        libraryList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                libraryListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(libraryList);

        deckCardList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deckCardListMouseClicked(evt);
            }
        });
        deckCardList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                deckCardListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(deckCardList);

        deleteFromDeckButton.setText("<");
        deleteFromDeckButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFromDeckButtonActionPerformed(evt);
            }
        });

        addToDeck.setText(">");
        addToDeck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToDeckActionPerformed(evt);
            }
        });

        deleteFromLibraryButton.setText("Delete from Library");
        deleteFromLibraryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFromLibraryButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                .addGap(2, 2, 2)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(deleteFromDeckButton)
                                    .addComponent(addToDeck)))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deckNameLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(deleteFromLibraryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(currentCard, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentCard, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(deckNameLabel))
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(deleteFromDeckButton)
                                .addGap(54, 54, 54)
                                .addComponent(addToDeck))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 277, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteFromLibraryButton)))
                .addGap(38, 38, 38))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addToDeckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToDeckActionPerformed
        String cardName = (String) libraryList.getSelectedValue();
        Card card = user.getLibrary().getCard(cardName);
        CardCollection selectedDeck = user.getDeck(deckName);

        if (card.getCV() + selectedDeck.getCV() < MAXCV
                && selectedDeck.getCardCount(cardName) < MAXCARD) {
            selectedDeck.addCard(card);

            populateCards();
            Login.serialize(user, user.getAccountName());
        }
    }//GEN-LAST:event_addToDeckActionPerformed

    private void deleteFromDeckButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFromDeckButtonActionPerformed
        String cardName = (String) deckCardList.getSelectedValue();

        if (cardName != null) {
            user.getDeck(deckName).removeOne(cardName);
            populateCards();
            Login.serialize(user, user.getAccountName());
        }
    }//GEN-LAST:event_deleteFromDeckButtonActionPerformed

    private void deleteFromLibraryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFromLibraryButtonActionPerformed
        String cardName = (String) libraryList.getSelectedValue();

        if (cardName != null) {
            user.deleteCard(cardName);
            populateLibrary();
            populateCards();
            Login.serialize(user, user.getAccountName());
        }
    }//GEN-LAST:event_deleteFromLibraryButtonActionPerformed

    private void libraryListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_libraryListValueChanged
    }//GEN-LAST:event_libraryListValueChanged

    private void libraryListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libraryListMouseClicked
        currentCard.changeCard(user.getLibrary().getCard((String) libraryList.getSelectedValue()));

    }//GEN-LAST:event_libraryListMouseClicked

    private void deckCardListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_deckCardListValueChanged
        
    }//GEN-LAST:event_deckCardListValueChanged

    private void deckCardListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deckCardListMouseClicked
        currentCard.changeCard(user.getLibrary().getCard((String)deckCardList.getSelectedValue()));
    }//GEN-LAST:event_deckCardListMouseClicked

    /**
     * @param args the command line arguments
     */
    public void run() {
        /*
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
        new EditDeckUI().setVisible(true);
        }
        });
         */
        setVisible(true);
    }

    public void populateLibrary() {
        DefaultListModel model = new DefaultListModel();
        libraryList.setModel(model);

        CardCollection library = user.getLibrary();

        for (int i = 0; i < library.size(); i++) {
            model.addElement(library.getCard(i).getName());
        }
    }

    public void populateCards() {
        DefaultListModel model = new DefaultListModel();
        deckCardList.setModel(model);
        CardCollection userDeck = user.getDeck(deckName);
        for (int i = 0; i < userDeck.size(); i++) {
            model.addElement(userDeck.getCard(i).getName());
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToDeck;
    private CardPanel currentCard;
    private javax.swing.JList deckCardList;
    private javax.swing.JLabel deckNameLabel;
    private javax.swing.JButton deleteFromDeckButton;
    private javax.swing.JButton deleteFromLibraryButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList libraryList;
    // End of variables declaration//GEN-END:variables
}
