/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CreatorUI.java
 *
 * Created on Apr 30, 2010, 12:40:52 AM
 */

/**
 *
 * @author aidandaly
 */

public class CreatorUI extends javax.swing.JFrame {

    /** Creates new form CreatorUI */
    public CreatorUI() {
        initComponents();
    }

    public CreatorUI(CardCollection lib) {
        initComponents();
        targetLibrary = lib;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        creator = new CardCreator();
        cardError = new javax.swing.JDialog();
        jLabel17 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        targetLibrary = new CardCollection();
        confirm = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        cardValField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        creatureStats = new javax.swing.JPanel();
        currHP = new javax.swing.JTextField();
        currPow = new javax.swing.JTextField();
        hpSlide = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        powerSlide = new javax.swing.JSlider();
        basicInfo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        cardType = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        abilityCraft = new javax.swing.JPanel();
        effectMagnitude = new javax.swing.JSlider();
        triggerSelection = new javax.swing.JComboBox();
        effectSelection = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        neutralCost = new javax.swing.JSpinner();
        redCost = new javax.swing.JSpinner();
        redPO = new javax.swing.JSpinner();
        greenCost = new javax.swing.JSpinner();
        greenPO = new javax.swing.JSpinner();
        blueCost = new javax.swing.JSpinner();
        bluePO = new javax.swing.JSpinner();
        whiteCost = new javax.swing.JSpinner();
        whitePO = new javax.swing.JSpinner();
        blackCost = new javax.swing.JSpinner();
        blackPO = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        chooseFile = new javax.swing.JButton();
        imagePathField = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        cardError.setTitle("Card Already Exists");

        jLabel17.setFont(new java.awt.Font("Charlemagne Std", 0, 13));
        jLabel17.setText("A card of that name already exists!");

        jButton1.setFont(new java.awt.Font("Charlemagne Std", 0, 13));
        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout cardErrorLayout = new org.jdesktop.layout.GroupLayout(cardError.getContentPane());
        cardError.getContentPane().setLayout(cardErrorLayout);
        cardErrorLayout.setHorizontalGroup(
            cardErrorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(cardErrorLayout.createSequentialGroup()
                .add(cardErrorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(cardErrorLayout.createSequentialGroup()
                        .add(147, 147, 147)
                        .add(jButton1))
                    .add(cardErrorLayout.createSequentialGroup()
                        .add(47, 47, 47)
                        .add(jLabel17)))
                .addContainerGap(62, Short.MAX_VALUE))
        );
        cardErrorLayout.setVerticalGroup(
            cardErrorLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(cardErrorLayout.createSequentialGroup()
                .add(62, 62, 62)
                .add(jLabel17)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jButton1)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Card Creation Portal");
        setBackground(new java.awt.Color(153, 51, 0));

        confirm.setFont(new java.awt.Font("Charlemagne Std", 0, 13));
        confirm.setText("OK");
        confirm.setEnabled(false);
        confirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmActionPerformed(evt);
            }
        });

        cancel.setFont(new java.awt.Font("Charlemagne Std", 0, 13));
        cancel.setText("Cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        cardValField.setEditable(false);
        cardValField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardValFieldActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Charlemagne Std", 0, 13));
        jLabel2.setText("CV");

        creatureStats.setBackground(new java.awt.Color(255, 255, 204));
        creatureStats.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Creature Stats", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Charlemagne Std", 3, 14))); // NOI18N

        currHP.setEditable(false);
        currHP.setFont(new java.awt.Font("Charlemagne Std", 1, 12));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, hpSlide, org.jdesktop.beansbinding.ELProperty.create("${value}"), currHP, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        currPow.setEditable(false);
        currPow.setFont(new java.awt.Font("Charlemagne Std", 1, 12));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, powerSlide, org.jdesktop.beansbinding.ELProperty.create("${value}"), currPow, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        hpSlide.setMaximum(3000);
        hpSlide.setMinimum(100);
        hpSlide.setMinorTickSpacing(100);
        hpSlide.setPaintLabels(true);
        hpSlide.setPaintTicks(true);
        hpSlide.setSnapToTicks(true);
        hpSlide.setValue(1000);
        hpSlide.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hpSlideStateChanged(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Charlemagne Std", 0, 12));
        jLabel3.setText("Power");

        jLabel4.setFont(new java.awt.Font("Charlemagne Std", 0, 12));
        jLabel4.setText("HP");

        powerSlide.setMaximum(3000);
        powerSlide.setMinimum(100);
        powerSlide.setMinorTickSpacing(100);
        powerSlide.setPaintTicks(true);
        powerSlide.setSnapToTicks(true);
        powerSlide.setValue(1000);
        powerSlide.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                powerSlideStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout creatureStatsLayout = new org.jdesktop.layout.GroupLayout(creatureStats);
        creatureStats.setLayout(creatureStatsLayout);
        creatureStatsLayout.setHorizontalGroup(
            creatureStatsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(creatureStatsLayout.createSequentialGroup()
                .addContainerGap()
                .add(creatureStatsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel4)
                    .add(jLabel3))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(creatureStatsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(hpSlide, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(powerSlide, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(creatureStatsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, currPow)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, currHP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 66, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(197, Short.MAX_VALUE))
        );
        creatureStatsLayout.setVerticalGroup(
            creatureStatsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(creatureStatsLayout.createSequentialGroup()
                .addContainerGap()
                .add(creatureStatsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(currPow, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(powerSlide, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(creatureStatsLayout.createSequentialGroup()
                        .add(9, 9, 9)
                        .add(jLabel3)))
                .add(15, 15, 15)
                .add(creatureStatsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel4)
                    .add(hpSlide, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(currHP, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        basicInfo.setBackground(new java.awt.Color(255, 255, 204));
        basicInfo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Basic Info", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Charlemagne Std", 3, 14))); // NOI18N
        basicInfo.setForeground(new java.awt.Color(102, 102, 0));

        jLabel1.setFont(new java.awt.Font("Charlemagne Std", 0, 12));
        jLabel1.setText("Card Name:");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });
        nameField.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                nameFieldPropertyChange(evt);
            }
        });
        nameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameFieldKeyTyped(evt);
            }
        });

        cardType.setFont(new java.awt.Font("Charlemagne Std", 0, 10));
        cardType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Creature", "Spell" }));
        cardType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cardTypeActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Charlemagne Std", 0, 12));
        jLabel5.setText("Card Type");

        org.jdesktop.layout.GroupLayout basicInfoLayout = new org.jdesktop.layout.GroupLayout(basicInfo);
        basicInfo.setLayout(basicInfoLayout);
        basicInfoLayout.setHorizontalGroup(
            basicInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(basicInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(26, 26, 26)
                .add(basicInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(cardType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel5))
                .addContainerGap(178, Short.MAX_VALUE))
        );
        basicInfoLayout.setVerticalGroup(
            basicInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(basicInfoLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(basicInfoLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(nameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(cardType, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 42, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        abilityCraft.setBackground(new java.awt.Color(255, 255, 204));
        abilityCraft.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ability Craft", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Charlemagne Std", 3, 14))); // NOI18N

        effectMagnitude.setMaximum(800);
        effectMagnitude.setMinorTickSpacing(100);
        effectMagnitude.setPaintLabels(true);
        effectMagnitude.setPaintTicks(true);
        effectMagnitude.setSnapToTicks(true);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, effectSelection, org.jdesktop.beansbinding.ELProperty.create("${enabled}"), effectMagnitude, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        triggerSelection.setFont(new java.awt.Font("Charlemagne Std", 0, 12));
        triggerSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-None-", "Pay", "No Attack", "Sacrifice", "Discard" }));
        triggerSelection.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                triggerSelectionItemStateChanged(evt);
            }
        });

        effectSelection.setFont(new java.awt.Font("Charlemagne Std", 0, 12));
        effectSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Damage Target", "Destroy Target", "Deactivate Target", "Draw Card", "Opponent Discard", "Heal Target" }));
        effectSelection.setEnabled(false);
        effectSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                effectSelectionActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Charlemagne Std", 0, 13));
        jLabel6.setText("Trigger");

        jLabel7.setFont(new java.awt.Font("Charlemagne Std", 0, 13));
        jLabel7.setText("Effect Type");

        jLabel8.setFont(new java.awt.Font("Charlemagne Std", 0, 10));
        jLabel8.setText("Magnitude");

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Charlemagne Std", 0, 10));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, effectMagnitude, org.jdesktop.beansbinding.ELProperty.create("${value}"), jTextField1, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        org.jdesktop.layout.GroupLayout abilityCraftLayout = new org.jdesktop.layout.GroupLayout(abilityCraft);
        abilityCraft.setLayout(abilityCraftLayout);
        abilityCraftLayout.setHorizontalGroup(
            abilityCraftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(abilityCraftLayout.createSequentialGroup()
                .addContainerGap()
                .add(abilityCraftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(abilityCraftLayout.createSequentialGroup()
                        .add(abilityCraftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(effectSelection, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7))
                        .add(18, 18, 18)
                        .add(abilityCraftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(effectMagnitude, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 176, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8)
                            .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(triggerSelection, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel6))
                .addContainerGap(119, Short.MAX_VALUE))
        );
        abilityCraftLayout.setVerticalGroup(
            abilityCraftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(abilityCraftLayout.createSequentialGroup()
                .add(jLabel6)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(triggerSelection, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(abilityCraftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(jLabel8))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(abilityCraftLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(effectSelection, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(effectMagnitude, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTextField1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Point Values", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Charlemagne Std", 3, 14))); // NOI18N

        neutralCost.setModel(new javax.swing.SpinnerNumberModel(800, 0, 5000, 50));
        neutralCost.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                neutralCostStateChanged(evt);
            }
        });

        redCost.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        redCost.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redCostStateChanged(evt);
            }
        });

        redPO.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        redPO.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                redPOStateChanged(evt);
            }
        });

        greenCost.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        greenCost.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                greenCostStateChanged(evt);
            }
        });

        greenPO.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        greenPO.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                greenPOStateChanged(evt);
            }
        });

        blueCost.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        blueCost.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blueCostStateChanged(evt);
            }
        });

        bluePO.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        bluePO.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bluePOStateChanged(evt);
            }
        });

        whiteCost.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        whiteCost.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                whiteCostStateChanged(evt);
            }
        });

        whitePO.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        whitePO.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                whitePOStateChanged(evt);
            }
        });

        blackCost.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        blackCost.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blackCostStateChanged(evt);
            }
        });

        blackPO.setModel(new javax.swing.SpinnerNumberModel(0, 0, 5000, 50));
        blackPO.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                blackPOStateChanged(evt);
            }
        });

        jLabel9.setText("Cost");

        jLabel10.setText("Payoff");

        jLabel11.setText("Neutral");

        jLabel12.setText("Red");

        jLabel13.setText("Green");

        jLabel14.setText("Blue");

        jLabel15.setText("White");

        jLabel16.setText("Black");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(44, 44, 44)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel12)
                    .add(jLabel14)
                    .add(jLabel15)
                    .add(jLabel13)
                    .add(jLabel16)
                    .add(jLabel11))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(neutralCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(greenCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(greenPO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(blueCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(bluePO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(blackCost)
                            .add(whiteCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(blackPO)
                            .add(whitePO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(redCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 54, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel9))
                        .add(18, 18, 18)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(redPO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(new java.awt.Component[] {blueCost, bluePO, greenCost, greenPO, neutralCost, redCost, redPO, whiteCost, whitePO}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(jLabel10))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(neutralCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel11))
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(redCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(redPO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel12))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(greenPO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(greenCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel13))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(bluePO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(blueCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel14))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(whiteCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(whitePO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jLabel15))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel16)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                        .add(blackPO, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(blackCost, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Card Image", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Charlemagne Std", 3, 14))); // NOI18N

        chooseFile.setFont(new java.awt.Font("Charlemagne Std", 0, 10));
        chooseFile.setText("Choose File");
        chooseFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseFileActionPerformed(evt);
            }
        });

        imagePathField.setEditable(false);

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(chooseFile)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(imagePathField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(imagePathField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(chooseFile))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Preview CV");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(abilityCraft, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(creatureStats, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(basicInfo, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(36, 36, 36)
                                .add(jButton2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 125, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jLabel2)
                                .add(4, 4, 4)
                                .add(cardValField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 96, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(layout.createSequentialGroup()
                                .add(18, 18, 18)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap(42, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(confirm)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(cancel)
                        .add(117, 117, 117))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(40, 40, 40)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 18, Short.MAX_VALUE)
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(jButton2)
                            .add(cardValField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2))
                        .add(38, 38, 38)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(confirm)
                            .add(cancel))
                        .add(36, 36, 36))
                    .add(layout.createSequentialGroup()
                        .add(basicInfo, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(creatureStats, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(abilityCraft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_nameFieldActionPerformed

    private void confirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmActionPerformed
        // TODO add your handling code here:
        inputCardInfo();
        Card c = creator.makeCard();
        if (targetLibrary == null)
            targetLibrary = new CardCollection();
        if (targetLibrary.hasCard(c.getName()))
        {
            nameField.setText("");
            cardError.setBounds(0, 0, 300, 300);
            cardError.setVisible(true);
        }
        else
        {
            targetLibrary.addCard(c);
            dispose();
        }
        System.out.print(targetLibrary);

    }//GEN-LAST:event_confirmActionPerformed

    private void cardValFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardValFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cardValFieldActionPerformed

    private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_cancelActionPerformed

    private void triggerSelectionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_triggerSelectionItemStateChanged
        // TODO add your handling code here:
        if (triggerSelection.getSelectedIndex() != 0)
            effectSelection.setEnabled(true);
        else
            effectSelection.setEnabled(false);
    }//GEN-LAST:event_triggerSelectionItemStateChanged

    private void effectSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_effectSelectionActionPerformed
        // TODO add your handling code here:
        updateEffectMagnitude();
    }//GEN-LAST:event_effectSelectionActionPerformed

    private void cardTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cardTypeActionPerformed
        // TODO add your handling code here:
        if (cardType.getSelectedIndex() != 0)
        {
            hpSlide.setEnabled(false);
            powerSlide.setEnabled(false);
            triggerSelection.setEnabled(false);
            effectSelection.setEnabled(true);
            redPO.setEnabled(false);
            greenPO.setEnabled(false);
            bluePO.setEnabled(false);
            whitePO.setEnabled(false);
            blackPO.setEnabled(false);
        }
        else
        {
            hpSlide.setEnabled(true);
            powerSlide.setEnabled(true);
            triggerSelection.setEnabled(true);
            if (triggerSelection.getSelectedIndex() == 0)
                effectSelection.setEnabled(false);
                        redPO.setEnabled(true);
            greenPO.setEnabled(true);
            bluePO.setEnabled(true);
            whitePO.setEnabled(true);
            blackPO.setEnabled(true);
        }
        updateEffectMagnitude();
    }//GEN-LAST:event_cardTypeActionPerformed

    private void neutralCostStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_neutralCostStateChanged
        // TODO add your handling code here:
        if (convertedCost()==0)
            neutralCost.setValue((Integer)100);
        updatePower();
        updateHP();
        updateEffectMagnitude();
        updatePayoff();
    }//GEN-LAST:event_neutralCostStateChanged

    private void redCostStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redCostStateChanged
        // TODO add your handling code here:
        if (convertedCost()==0)
            neutralCost.setValue((Integer)100);
        updatePower();
        updateHP();
        updateEffectMagnitude();
        updatePayoff();

    }//GEN-LAST:event_redCostStateChanged

    private void greenCostStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_greenCostStateChanged
        // TODO add your handling code here:
        if (convertedCost()==0)
            neutralCost.setValue((Integer)100);
        updatePower();
        updateHP();
        updateEffectMagnitude();
        updatePayoff();

    }//GEN-LAST:event_greenCostStateChanged

    private void blueCostStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blueCostStateChanged
        // TODO add your handling code here:
        if (convertedCost()==0)
            neutralCost.setValue((Integer)100);
        updatePower();
        updateHP();
        updateEffectMagnitude();
        updatePayoff();

    }//GEN-LAST:event_blueCostStateChanged

    private void whiteCostStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_whiteCostStateChanged
        // TODO add your handling code here:
        if (convertedCost()==0)
            neutralCost.setValue((Integer)100);
        updatePower();
        updateHP();
        updateEffectMagnitude();
        updatePayoff();
    }//GEN-LAST:event_whiteCostStateChanged

    private void blackCostStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blackCostStateChanged
        // TODO add your handling code here:
        if (convertedCost()==0)
            neutralCost.setValue((Integer)100);
        updatePower();
        updateHP();
        updateEffectMagnitude();
        updatePayoff();
    }//GEN-LAST:event_blackCostStateChanged

    private void powerSlideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_powerSlideStateChanged
        // TODO add your handling code here:
        /* Updates value of magnitude if it depends on Creature's power*/
        updateHP();
        updateEffectMagnitude();
    }//GEN-LAST:event_powerSlideStateChanged

    private void hpSlideStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hpSlideStateChanged
        // TODO add your handling code here:
        updatePower();
    }//GEN-LAST:event_hpSlideStateChanged

    private void redPOStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_redPOStateChanged
        // TODO add your handling code here:
        updatePayoff();
    }//GEN-LAST:event_redPOStateChanged

    private void greenPOStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_greenPOStateChanged
        // TODO add your handling code here:
        updatePayoff();
    }//GEN-LAST:event_greenPOStateChanged

    private void bluePOStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bluePOStateChanged
        // TODO add your handling code here:
        updatePayoff();
    }//GEN-LAST:event_bluePOStateChanged

    private void whitePOStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_whitePOStateChanged
        // TODO add your handling code here:
        updatePayoff();
    }//GEN-LAST:event_whitePOStateChanged

    private void blackPOStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_blackPOStateChanged
        // TODO add your handling code here:
        updatePayoff();
    }//GEN-LAST:event_blackPOStateChanged

    private void chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseFileActionPerformed
        // TODO add your handling code here:
        ImageChooser img = new ImageChooser();
        img.run(creator);
    }//GEN-LAST:event_chooseFileActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        inputCardInfo();
        cardValField.setText(""+creator.cardValue());
    }//GEN-LAST:event_jButton2ActionPerformed

    private void nameFieldPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_nameFieldPropertyChange
        // TODO add your handling code here:
        

    }//GEN-LAST:event_nameFieldPropertyChange

    private void nameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameFieldKeyTyped
        // TODO add your handling code here:
        if ((nameField.getText()).length()<5)
            confirm.setEnabled(false);
        else
            confirm.setEnabled(true);
    }//GEN-LAST:event_nameFieldKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cardError.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreatorUI().setVisible(true);
            }
        });
    }

    public void run()
    {
        setVisible(true);
    }

    private int convertedCost() {
        int neutral = ((Integer)neutralCost.getValue()).intValue();
        int red = ((Integer)redCost.getValue()).intValue();
        int green = ((Integer)greenCost.getValue()).intValue();
        int blue = ((Integer)blueCost.getValue()).intValue();
        int white = ((Integer)whiteCost.getValue()).intValue();
        int black = ((Integer)blackCost.getValue()).intValue();
        return neutral+red+green+blue+white+black;
    }

    private int convertedPO() {
        int red = ((Integer)redPO.getValue()).intValue();
        int green = ((Integer)greenPO.getValue()).intValue();
        int blue = ((Integer)bluePO.getValue()).intValue();
        int white = ((Integer)whitePO.getValue()).intValue();
        int black = ((Integer)blackPO.getValue()).intValue();
        return red+green+blue+white+black;
    }

    private int numCostColors() {
        int colors = 0;
        int neutral = ((Integer)neutralCost.getValue()).intValue();
        int red = ((Integer)redCost.getValue()).intValue();
        int green = ((Integer)greenCost.getValue()).intValue();
        int blue = ((Integer)blueCost.getValue()).intValue();
        int white = ((Integer)whiteCost.getValue()).intValue();
        int black = ((Integer)blackCost.getValue()).intValue();
        if (neutral > 0) colors++;
        if (red > 0) colors++;
        if (green > 0) colors++;
        if (blue > 0) colors++;
        if (white > 0) colors++;
        if (black > 0) colors++;
        return colors;
    }

    private int numPOColors() {
        int colors = 0;
        int red = ((Integer)redPO.getValue()).intValue();
        int green = ((Integer)greenPO.getValue()).intValue();
        int blue = ((Integer)bluePO.getValue()).intValue();
        int white = ((Integer)whitePO.getValue()).intValue();
        int black = ((Integer)blackPO.getValue()).intValue();
        if (red > 0) colors++;
        if (green > 0) colors++;
        if (blue > 0) colors++;
        if (white > 0) colors++;
        if (black > 0) colors++;
        return colors;
    }

    private void updatePower() {
        int n = Math.min((convertedCost()*numCostColors()/
                (hpSlide.getValue()+100))*500,convertedCost()+numCostColors()*100);
        powerSlide.setMaximum(n);
        powerSlide.setMinimum(100);
    }

    private void updateHP() {
        int n = Math.min(convertedCost()*(numCostColors()+1)/
                (powerSlide.getValue()+100)*500, convertedCost()+numCostColors()*100);
        hpSlide.setMaximum(n);
        hpSlide.setMinimum(100);
    }

    private void updatePayoff() {
        int redVal = ((Integer)(redPO.getModel()).getValue()).intValue();
        int greenVal = ((Integer)(greenPO.getModel()).getValue()).intValue();
        int blueVal = ((Integer)(bluePO.getModel()).getValue()).intValue();
        int whiteVal = ((Integer)(whitePO.getModel()).getValue()).intValue();
        int blackVal = ((Integer)(blackPO.getModel()).getValue()).intValue();

        (redPO.getModel()).setValue(Math.min(redVal,
                convertedCost()-convertedPO()));
        (greenPO.getModel()).setValue(Math.min(greenVal,
                convertedCost()-convertedPO()));
        (bluePO.getModel()).setValue(Math.min(blueVal,
                convertedCost()-convertedPO()));
        (whitePO.getModel()).setValue(Math.min(whiteVal,
                convertedCost()-convertedPO()));
        (blackPO.getModel()).setValue(Math.min(blackVal,
                convertedCost()-convertedPO()));
    }

    private void updateEffectMagnitude() {
        effectMagnitude.setMinimum(0);
        if (effectSelection.getSelectedIndex() == 0)
        {
            if (cardType.getSelectedIndex()==0)
                effectMagnitude.setMaximum(powerSlide.getValue()/
                        (7-numCostColors()));
            else
                effectMagnitude.setMaximum(convertedCost()*numCostColors()/6);
            effectMagnitude.setMinorTickSpacing(50);

        }
        if (effectSelection.getSelectedIndex() == 1)
        {
            if (cardType.getSelectedIndex()==0)
                effectMagnitude.setMaximum(convertedCost()/
                        ((7-numCostColors())*powerSlide.getValue()));
            else
                effectMagnitude.setMaximum(numCostColors()-1);
            effectMagnitude.setMinorTickSpacing(1);
        }
        if (effectSelection.getSelectedIndex() == 2)
        {
            if (cardType.getSelectedIndex()==0)
                effectMagnitude.setMaximum(convertedCost()/
                        powerSlide.getValue());
            else
                effectMagnitude.setMaximum(numCostColors());
            effectMagnitude.setMinorTickSpacing(1);
        }
        if (effectSelection.getSelectedIndex() == 3 ||
            effectSelection.getSelectedIndex() == 4)
        {
            effectMagnitude.setMaximum(HumanPlayer.MAXHANDSIZE -
                    (6-numCostColors()));
            effectMagnitude.setMinorTickSpacing(1);
        }
        if (effectSelection.getSelectedIndex() == 5)
        {
            effectMagnitude.setMaximum(convertedCost()/2);
            effectMagnitude.setMinorTickSpacing(50);
        }
    }

    public void inputCardInfo()
    {
        creator.setCardName(nameField.getText());

        creator.setNeutralCost(((Integer)neutralCost.getValue()).intValue());
        creator.setRedCost(((Integer)redCost.getValue()).intValue());
        creator.setGreenCost(((Integer)greenCost.getValue()).intValue());
        creator.setBlueCost(((Integer)blueCost.getValue()).intValue());
        creator.setWhiteCost(((Integer)whiteCost.getValue()).intValue());
        creator.setBlackCost(((Integer)blackCost.getValue()).intValue());
        creator.setRedPO(((Integer)redPO.getValue()).intValue());
        creator.setGreenPO(((Integer)greenPO.getValue()).intValue());
        creator.setBluePO(((Integer)bluePO.getValue()).intValue());
        creator.setWhitePO(((Integer)whitePO.getValue()).intValue());
        creator.setBlackPO(((Integer)blackPO.getValue()).intValue());

        creator.setConvertedCost(convertedCost());
        creator.setConvertedPO(convertedPO());
        creator.setNumCostColors(numCostColors());
        creator.setNumPOColors(numPOColors());

        creator.setPower(powerSlide.getValue());
        creator.setHP(hpSlide.getValue());

        creator.setTrigger(getTriggerSelection());
        creator.setEffectType(getEffectTypeSelection());
        creator.setEffectMagnitude(effectMagnitude.getValue());

        if (cardType.getSelectedIndex()==0)
            creator.setCreatureStatus(true);
        else
            creator.setCreatureStatus(false);
    }

    public Trigger getTriggerSelection()
    {
        int i = triggerSelection.getSelectedIndex();
        switch (i)
        {
            case 1: return Trigger.PAY;
            case 2: return Trigger.NOATTACK;
            case 3: return Trigger.SACRIFICE;
            case 4: return Trigger.DISCARD;
            default: return null;
        }
    }

    public EffectType getEffectTypeSelection()
    {
        int i = effectSelection.getSelectedIndex();
        switch (i)
        {
            case 0: return EffectType.DEALDAMAGE;
            case 1: return EffectType.DESTROY;
            case 2: return EffectType.DEACTIVATE;
            case 3: return EffectType.DRAW;
            case 4: return EffectType.DISCARD;
            case 5: return EffectType.HEAL;
            default: return null;
        }

    }



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel abilityCraft;
    private javax.swing.JPanel basicInfo;
    private javax.swing.JSpinner blackCost;
    private javax.swing.JSpinner blackPO;
    private javax.swing.JSpinner blueCost;
    private javax.swing.JSpinner bluePO;
    private javax.swing.JButton cancel;
    private javax.swing.JDialog cardError;
    private javax.swing.JComboBox cardType;
    private javax.swing.JTextField cardValField;
    private javax.swing.JButton chooseFile;
    private javax.swing.JButton confirm;
    private CardCreator creator;
    private javax.swing.JPanel creatureStats;
    private javax.swing.JTextField currHP;
    private javax.swing.JTextField currPow;
    private javax.swing.JSlider effectMagnitude;
    private javax.swing.JComboBox effectSelection;
    private javax.swing.JSpinner greenCost;
    private javax.swing.JSpinner greenPO;
    private javax.swing.JSlider hpSlide;
    private javax.swing.JTextField imagePathField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField nameField;
    private javax.swing.JSpinner neutralCost;
    private javax.swing.JSlider powerSlide;
    private javax.swing.JSpinner redCost;
    private javax.swing.JSpinner redPO;
    private CardCollection targetLibrary;
    private javax.swing.JComboBox triggerSelection;
    private javax.swing.JSpinner whiteCost;
    private javax.swing.JSpinner whitePO;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

}
